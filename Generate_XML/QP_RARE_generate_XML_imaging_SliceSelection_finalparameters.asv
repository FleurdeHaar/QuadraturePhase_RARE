%% This Matlab file makes a XML file for JEMRIS simulations of a Quadrature Phase RARE sequence 
% QP-RARE sequence with slice selection for imaging
% Certain parameters can be choose by the user:
% - QP-RARE scheme to be used: 3 or 7 prepulse scheme
% - Use Variable flip scheme for imaging pulses or a constant flip angle
% scheme
% - It can be choosen to add a blib to simulate diffusion weighted
% situation
% The ammount of imaging echoes, it always needs to be *2, since for image
% reconstruction every line is obtained twice

clear all 
close all

% Set name for saving XML file for sequence 
name = 'RARE_quadphase_schemefunction_180_7pre_scanner.xml' ;



%% Sequence-level parameters 
FOVx          = 132;      % mm
FOVy          = 132;      % mm
FOVz          =   3;      % mm
GradMaxAmpl   = 21.4;     % rad/mm*ms (= 80 mT/m) --> Hardware limitation
GradSlewRate  = 53.50;    % rad/mm/ms^2 (=200 T/m/s) --> Hardware limitation
Nx            =  32;      % Grid size parameter X
Ny            =  32;      % Grid size parameter Y
Nz            =   1;      % Grid size parameter Z
TE            =  6.5;      % Echo time in ms
TD            =  0.01;    % Dwell Time in ms

% Imaging echoes (for example. 36), two overscan lines, now Partial K space
% sampled
%n_img = 18*2; 
% Or full k space sampling
n_img = Nx*2;
%% Set Difussion weighted simulation parameters
% Set this to true if you want to add a blib to show diffusion effects
blib = false;  
phase_variation = 2; % Phase variation over the image (1=2*Pi, 2=Pi, etc)
axis_phase_var = "GX"; % Axis over which phase variation is added 
excitation_initialphase = 0; % Set initial phase of 90 pulse (phase offset)

%% Quadrature phase scheme
n_prep = 3;   % Prepulses (3 of 7)

% Calculate echo train length
etl = n_prep + n_img;

% Le Roux phase schemes
if n_prep == 3
    [E_rad, R_rad] = phase_mod_Leroux3(etl);
else 
    [E_rad, R_rad] = phase_mod_Leroux_7prepulsescheme(etl);
end
E_deg = rad2deg(E_rad);
R_deg = rad2deg(R_rad);


%% Building flip angle scheme
% Set the value of the constant flip angle used
constant_flipangle = 180;

% If use variable flip angle set to 'true'
use_variable_flip = false;

if use_variable_flip % Make a variable flip angle scheme
    % Prepulses set to 180 deg, to obtain the eigenstate
    prep_flips = 180 * ones(1, n_prep);

    N      = etl - n_prep;         % total number of refocusing pulses
    i      = (0:N-1)/(N-1);           % normalized echo index 0→1
        
    % a U-shaped parabola: 4*(i–0.5)^2 goes 1→0→1 as i goes 0→0.5→1
    w      = 4*(i - 0.5).^2;          
    
    % now map that onto [180°→constant_flipangle→180°]
    flips_v = constant_flipangle + (180 - constant_flipangle) * w;

    lips_v = deg2rad([prep_flips, flips_v]);
else % Create a train of constant_flip_angles set of length ETL
    lips_v = constant_flipangle * ones(1, etl);
end

%% Create XML file with all set parameters for quadrature phase RARE sequence 
% Open XML
fid = fopen(name, 'w');
fprintf(fid, '<?xml version="1.0" encoding="utf-8"?>\n');

% Make parameter - P-node with chosen parameters 
fmt = [ ...
  '<Parameters ' ...
    'FOVx="%g" FOVy="%g" FOVz="%g" Name="P" ' ...
    'GradMaxAmpl="%g" GradSlewRate="%g" '   ...
    'Nx="%d" Ny="%d" Nz="%d" TE="%g" TD="%g">'     ...
  '\n'                                  ...
];

fprintf(fid, fmt, ...
        FOVx, FOVy, FOVz, ...
        GradMaxAmpl, GradSlewRate, ...
        Nx, Ny, Nz, TE, TD);

fprintf(fid, '   <ConcatSequence Name="QPRARE">\n');
fprintf(fid, '      <ConcatSequence Name="3Dloop">\n');

% % Excitation block + slice selection
% 90-pulse; Slice-selection excitation block (sinc RF + Slice selectoin)
fprintf(fid, '         <ATOMICSEQUENCE Name="RFPprep0">\n');

% Sinc excitation pulse
fprintf(fid, '                <SINCRFPULSE Apodization="0.5" Bandwidth="4" FlipAngle="90" InitialDelay="RUT" InitialPhase="%.10g" Name="P1" Zeros="4" Observe="RUT=SS.RampUpTime"/>\n', excitation_initialphase);
% Slice selection
fprintf(fid, '                <TRAPGRADPULSE Axis="GZ" FlatTopArea="2*Pi/FOVz" FlatTopTime="D" Name="SS" Observe="D=P1.Duration, FOVz=P.FOVz"/>\n');
fprintf(fid, '         </ATOMICSEQUENCE>\n');

% Rephasing slice selection
fprintf(fid, '         <ATOMICSEQUENCE Name="SSrep">\n');
fprintf(fid, '                <TRAPGRADPULSE Area="-A/2" Axis="GZ" Name="rep" Observe="A=SS.Area"/>\n');
fprintf(fid, '         </ATOMICSEQUENCE>\n');
if blib
    % rephasing
    fprintf(fid, '         <ATOMICSEQUENCE Name="GYBLIB">\n');
    fprintf(fid, '                <TRAPGRADPULSE Area="DKy/%d" Axis="%s" Name="PBLIB" Observe="DKy=P.DKy"/>\n', phase_variation,  axis_phase_var);
    fprintf(fid, '         </ATOMICSEQUENCE>\n');

    % Zero flip angle hard RF pulse
    fprintf(fid, '         <ATOMICSEQUENCE Name="BLIBZERO">\n');
    fprintf(fid, '                <HARDRFPULSE Axis="RF" Duration="0.1" FlipAngle="0" Name="PBLIBRF"/>\n');
    fprintf(fid, '         </ATOMICSEQUENCE>\n');

end

% PrePhasing Read Out 
fprintf(fid, '         <ATOMICSEQUENCE Name="ROpreb">\n');
fprintf(fid, '                <TRAPGRADPULSE Area="A/2" Axis="GX" Name="ROpre" Observe="A=ROimg%d.Area"/>\n', 1 + n_prep);
fprintf(fid, '         </ATOMICSEQUENCE>\n');

% Delay before prepulses (half-TE, minus the crusher time)
fprintf(fid, '         <DELAYATOMICSEQUENCE Delay="TE/2-CR1" DelayType="B2E" Name="D1" Observe="TE=P.TE,CR1=Crush11.Duration" StartSeq="RFPprep0"/>\n');

% Prepulses block
for i = 1:n_prep
    fprintf(fid, '         <ConcatSequence Name="PREP%d">\n', i);
    
    % refocussing pulse + slice selection + crushers 

    % Crusher 1
    fprintf(fid, '            <ATOMICSEQUENCE Name="RFprep_c%d">\n', i);
    fprintf(fid, '               <TRAPGRADPULSE Area="2*Pi/(Dz/2)" Axis="GZ" Name="Crush1%d" Observe="Dz=P.Dz"/>\n', i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n');

    % Refocus sinc pulse 
    fprintf(fid, '            <ATOMICSEQUENCE Name="RFprep_ref%d">\n', i);
    % Slice selection
    fprintf(fid, '               <TRAPGRADPULSE Axis="GZ" FlatTopArea="2*Pi/FOVz" FlatTopTime="D" Name="SS2%d" Observe="D=PprepRF%d.Duration, FOVz=P.FOVz"/>\n', i, i);        
    fprintf(fid, '               <SINCRFPULSE Apodization="0.5" Bandwidth="4" FlipAngle="%.10g" InitialPhase="%.10g" InitialDelay="RUT" Name="PprepRF%d" Refocusing="1" Observe="RUT=SS2%d.RampUpTime" Zeros="4"/>\n',  lips_v(i), E_deg(i), i, i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n'); 
    
    % Crusher 2 
    fprintf(fid, '            <ATOMICSEQUENCE Name="RFprep_c2%d">\n', i);
    fprintf(fid, '               <TRAPGRADPULSE Area="2*Pi/(Dz/2)" Axis="GZ" Name="Crush2%d" Observe="Dz=P.Dz"/>\n', i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n');

    % Dummy PE & RO, no gradients turned on, since no imaging here 
    fprintf(fid, '            <ATOMICSEQUENCE Name="AprepPE%d">\n', i);
    fprintf(fid, '               <TRAPGRADPULSE Axis="GY" Name="PEprep%d" Observe="KMy=P.KMAXy, DKy=P.DKy, Ny=P.Ny"/>\n', i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n');

    % Delay for echo spacing
     % Delay of TE, minus the crusher duration
    fprintf(fid, '            <DELAYATOMICSEQUENCE Delay="TE/2" DelayType="C2C" Name="D3%d" Observe="TE=P.TE, StartSeq="RFprep_ref%d, StopSeq="/>\n' i,i,i,i);
   
    fprintf(fid, '            <ATOMICSEQUENCE Name="AprepRO%d">\n', i);
    fprintf(fid, '               <TRAPGRADPULSE ADCFlag="0" Axis="GX" InitialPhase="%.10g" Name="ROprep%d" FlatTopArea="2*KMx" FlatTopTime="DWELL*Nx" Observe="KMx=P.KMAXx, Nx=P.Nx, DWELL=P.TD"/>\n', ...
        R_deg(i), i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n');
    fprintf(fid, '            <ATOMICSEQUENCE Name="AprepREPH%d">\n', i);
    fprintf(fid, '               <TRAPGRADPULSE Axis="GY" Name="REPHprep%d" Observe="A=PEprep%d.Area"/>\n', i, i);
    fprintf(fid, '            </ATOMICSEQUENCE>\n');

    % Delay of TE, minus the crusher duration
    fprintf(fid, '            <DELAYATOMICSEQUENCE Delay="TE-D1-D2" DelayType="B2E" Name="D2%d" Observe="TE=P.TE, D1=Crush1%d.RampUpTime, D2=Crush1%d.EndOfFlatTop" StartSeq="RFprep_ref%d"/>\n', i,i,i,i);
    fprintf(fid, '         </ConcatSequence>\n');
end

% Imaging echo train: each PE-line two echoes (linear), with crushers etc.   
echo_nr = n_prep + 1; % echo-counter

% Imaging pulses block
for pe = 1:((Ny/2)+((n_img-Ny)/2))
    for rep = 1:2   % two echoes per PE step
        i = echo_nr;
        rf_phase = E_deg(i);
        adc_phase = R_deg(i);
        flip_angle = lips_v(i);

        fprintf(fid, '         <ConcatSequence Name="ECHO%d">\n', i);
        
        % refocussing pulse + slice selection + crushers 
        % Crusher 1 
        fprintf(fid, '         <ATOMICSEQUENCE Name="RFimg_c_%d">\n', i);
        fprintf(fid, '               <TRAPGRADPULSE Area="2*Pi/(Dz/2)" Axis="GZ" Name="Crush1img%d" Observe="Dz=P.Dz"/>\n', i);
        fprintf(fid, '            </ATOMICSEQUENCE>\n');

        % Refocus and sinc pulse
        fprintf(fid, '          <ATOMICSEQUENCE Name="RFimg_ref%d">\n', i);
        fprintf(fid, '            <SINCRFPULSE Apodization="0.5" Bandwidth="4" FlipAngle="%.10g" InitialDelay="RUT" InitialPhase="%.10g" Name="PimgRF%d" Refocusing="1" Zeros="4" Observe="RUT=SSimg%d.RampUpTime"/>\n', flip_angle, rf_phase,i, i);
        fprintf(fid, '            <TRAPGRADPULSE Axis="GZ" FlatTopArea="2*Pi/FOVz" FlatTopTime="D" Name="SSimg%d" Observe="D=PimgRF%d.Duration, FOVz=P.FOVz"/>\n', i, i);
        fprintf(fid, '          </ATOMICSEQUENCE>\n'); 

        % Crusher 2 
        fprintf(fid, '          <ATOMICSEQUENCE Name="RFimg_c2_%d">\n', i);
        fprintf(fid, '            <TRAPGRADPULSE Area="2*Pi/(Dz/2)" Axis="GZ" Name="Crush2img%d" Observe="Dz=P.Dz"/>\n', i);
        fprintf(fid, '          </ATOMICSEQUENCE>\n');


        % PE-gradient: Area="(-KMy + DKy * (pe))"
        fprintf(fid, '            <ATOMICSEQUENCE Name="AimgPE%d">\n', i);
        fprintf(fid, '               <TRAPGRADPULSE Area="(-KMy + DKy*%d)" Axis="GY" Name="PEimg%d" Observe="KMy=P.KMAXy, DKy=P.DKy, Ny=P.Ny"/>\n', ...
            (pe), i);
        fprintf(fid, '            </ATOMICSEQUENCE>\n');

        % RO-gradient & ADC
        fprintf(fid, '            <ATOMICSEQUENCE Name="AimgRO%d">\n', i);
        fprintf(fid, '               <TRAPGRADPULSE ADCFlag="2" ADCs="%d" Axis="GX" FlatTopArea="2*KMx" FlatTopTime="DWELL*Nx" InitialPhase="%.10g" Name="ROimg%d" Observe="KMx=P.KMAXx, Nx=P.Nx, DWELL=P.TD"/>\n', ...
            Nx, adc_phase, i);
        fprintf(fid, '            </ATOMICSEQUENCE>\n');

        % Rephaser (neutr. PE)
        fprintf(fid, '            <ATOMICSEQUENCE Name="AimgREPH%d">\n', i);
        fprintf(fid, '               <TRAPGRADPULSE Area="-A" Axis="GY" Name="REPHimg%d" Observe="A=PEimg%d.Area"/>\n', i, i);
        fprintf(fid, '            </ATOMICSEQUENCE>\n');

        % Delay of TE, minus the crusher duration
        fprintf(fid, '            <DELAYATOMICSEQUENCE Delay="TE-D1-D2" DelayType="B2E" Name="D3%d" Observe="TE=P.TE, D1=Crush1img%d.RampUpTime, D2=Crush1img%d.EndOfFlatTop" StartSeq="RFimg%d"/>\n', i, i,i,i);
        
        fprintf(fid, '         </ConcatSequence>\n');
        echo_nr = echo_nr + 1;
    end
end

% Close XML
fprintf(fid, '      </ConcatSequence>\n');
fprintf(fid, '   </ConcatSequence>\n');
fprintf(fid, '</Parameters>\n');
fclose(fid);

%% Print summary
fprintf('\n===== QP-RARE XML Generation Summary =====\n');
fprintf('XML Filename: %s\n', name);
fprintf('Imaging echoes (n_img): %d\n', n_img);
fprintf('Echo Train Length (etl): %d (n_prep=%d + n_img=%d)\n', etl, n_prep, n_img);
fprintf('Field of View: [FOVx, FOVy, FOVz] = [%g, %g, %g] mm\n', FOVx, FOVy, FOVz);
fprintf('Hardware Limits: GradMaxAmpl=%g rad/mm/ms, GradSlewRate=%g rad/mm/ms^2\n', GradMaxAmpl, GradSlewRate);
fprintf('Grid size: [Nx, Ny, Nz] = [%d, %d, %d]\n', Nx, Ny, Nz);
fprintf('Echo Time TE: %g ms\n', TE);
fprintf('Dwell Time TD: %g ms\n', TD);
fprintf('Diffusion block (blib): %d (phase_variation=%d, axis=%s)\n', blib, phase_variation, axis_phase_var);
fprintf('Initial excitation phase: %g rad\n', excitation_initialphase);
fprintf('Flip angle scheme: constant_flipangle=%g, use_variable_flip=%d\n', constant_flipangle, use_variable_flip);
fprintf('First 10 RF phases (deg): %s\n', mat2str(E_deg(1:min(10,length(E_deg)))));
fprintf('First 10 Receiver phases (deg): %s\n', mat2str(R_deg(1:min(10,length(R_deg)))));
fprintf('Refocusing flips (lips_v) sample: %s\n', mat2str(lips_v(1:min(10,length(lips_v)))));
fprintf('===========================================\n');

disp('XML for QP_RARE generated with set parameters');